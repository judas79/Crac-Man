using System.Collections;
using System.Collections.Generic;
using UnityEngine;
// T18 get system library, Used to find out if Pac-Man hits a wall
using System;

public class MsPacman : MonoBehaviour
{
    // T18 MsPacmans properties; speed
    public float speed = 4f;

    // T18 move mrspacman using rigidbody 2d
    private Rigidbody2D rb;

    // 5. Sprite used when Pac-Man is paused, to stop the sprite; 
    // stop the animation from moving, at a selected single sprite image
    // public so we can drag selected single sprite into our script, to use for this purpose
    public Sprite pausedSprite;

    // T18 awake function, to create component(s) before they are to be used
    private void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
    }

    // T18 Start is called before the first frame update
    // get mspacman and start moving her to the left, at the default speed, when game begins
    void Start()
    {
        rb.velocity = new Vector2(-1, 0) * speed;
    }


    // T18 move mspacman around our screen, using rigidbodies 2d
    // we will take input from the user, that will instruct which direction to go in
    private void FixedUpdate()
    {
        // get mspacmans horizontal movement, x, for the a or d key to move left or right
        // get vertical movement , for y, keys W of S
        float horzMove = Input.GetAxisRaw("Horizontal");
        float vertMove = Input.GetAxisRaw("Vertical");

        // T19 Whenever one of the letter keys are clicked, we need to store the direction we want to move in
        Vector2 moveVect;

        // T19 Used to get direction Pac-Man is moving on the X & Y access
        // so mspacman can reverse direction, anywhere, without having to be on a turning Point
        var localVelocity = transform.InverseTransformDirection(rb.velocity);

        // T18 check if input a was pressed
        if (Input.GetKeyDown("a"))
        {
            // T19 enable mspacman to reverse direction anywhere, without being on turn points
            // if mspacman is moving in the right direction
            if(localVelocity.x > 0)
            {
                // T19 define moveVect, for moving horizontally, y is 0
                moveVect = new Vector2(horzMove, 0);

                // T19 Position Pac-Man at middle of the lane, centered for movement changes
                transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                // T19 get mspacmans and make her velocity go left, since she can
                rb.velocity = moveVect * speed;

                // make mspacman face left, using her sprite
                transform.localScale = new Vector2(1, 1);
                // set rotation to its default
                transform.localRotation = Quaternion.Euler(0, 0, 0);
            }
            else
            {
                // T19 define moveVect, for moving horizontally, y is 0
                moveVect = new Vector2(horzMove, 0);

                // T19 since the user chose 'a' he wants to move horizontaly to the left
                // we need to verify, that it is posible to move to the left, or not
                // so we will create a bool function below: CanIMoveInDirection()

                // if we can move in a requested direction
                if (CanIMoveInDirection(moveVect))
                {
                    // T19 Position Pac-Man at middle of the lane, centered for movement changes
                    transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                    // T19 get mspacmans and make her velocity go left, since she can
                    rb.velocity = moveVect * speed;

                    // make mspacman face left, using her sprite
                    transform.localScale = new Vector2(1, 1);
                    // set rotation to its default
                    transform.localRotation = Quaternion.Euler(0, 0, 0);
                }
            }

            /* T19 Moved in T19 into if and else statements above this section
             * 
            // T18 get mspacmans rigidbody make her velocity go left, x is horzMove, y is 0
            // T19 changed to to ...below the commented out one
            //rb.velocity = new Vector2(horzMove, 0) * speed;
            rb.velocity = moveVect * speed;

            // make mspacman face left, using her sprite
            transform.localScale = new Vector2(1, 1);
            // set rotation to its default
            transform.localRotation = Quaternion.Euler(0, 0, 0);
            */

        }

        // check if its another input option for horizontal
        else if (Input.GetKeyDown("d"))
        {
            // T19 enable mspacman to reverse direction anywhere, without being on turn points
            // if mspacman is moving in the left direction
            if (localVelocity.x < 0)
            {
                // T19 define moveVect, for moving horizontally, y is 0
                moveVect = new Vector2(horzMove, 0);

                // T19 Position Pac-Man at middle of the lane, centered for movement changes
                transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                // T19 get mspacmans and make her velocity go left, since she can
                rb.velocity = moveVect * speed;

                // make mspacman face left, using her sprite
                transform.localScale = new Vector2(-1, 1);

                // set rotation to its default
                transform.localRotation = Quaternion.Euler(0, 0, 0);
            }
            else
            {
                // T19 define moveVect, for moving horizontally, y is 0
                moveVect = new Vector2(horzMove, 0);

                // T19 since the user chose 'a' he wants to move horizontaly to the left
                // we need to verify, that it is posible to move to the left, or not
                // so we will create a bool function below: CanIMoveInDirection()

                // if we can move in a requested direction
                if (CanIMoveInDirection(moveVect))
                {
                    // T19 Position Pac-Man at middle of the lane, centered for movement changes
                    transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                    // T19 get mspacmans and make her velocity go left, since she can
                    rb.velocity = moveVect * speed;

                    // make mspacman face left, using her sprite
                    transform.localScale = new Vector2(-1, 1);

                    // set rotation to its default
                    transform.localRotation = Quaternion.Euler(0, 0, 0);
                }
            }

            /* T19 Moved in T19 into if and else statements above this section
             * 
            // get mspacmans rigidbody make her velocity go right, x is horzMove, y is 0
            //rb.velocity = new Vector2(horzMove, 0) * speed;
            rb.velocity = moveVect * speed;

            // make mspacman face right, using her sprite, she faces left by default
            transform.localScale = new Vector2(-1, 1);
            // set rotation to its default
            transform.localRotation = Quaternion.Euler(0, 0, 0);
            */

        }

        // check if its another input option, vertical up
        else if (Input.GetKeyDown("w"))
        {
            // T19 enable mspacman to reverse direction anywhere, without being on turn points
            // if mspacman is moving in the left direction
            if (localVelocity.y > 0)
            {
                // T19 define moveVect, for moving vertically, x is 0
                moveVect = new Vector2(0, vertMove);

                // T19 Position Pac-Man at middle of the lane, centered for movement changes
                transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                // T18 get mspacmans rigidbody make her velocity go up, x is vertMove,x is 0
                //rb.velocity = new Vector2(0, vertMove) * speed;
                // T19
                rb.velocity = moveVect * speed;

                // make mspacman face right, using her sprite, she faces left by default
                transform.localScale = new Vector2(1, 1);
                // set rotation to its default
                transform.localRotation = Quaternion.Euler(0, 0, 270);
            }
            else
            {


                // T19 define moveVect, for moving vertically, x is 0
                moveVect = new Vector2(0, vertMove);

                // if we can move in a requested direction
                if (CanIMoveInDirection(moveVect))
                {
                    // T19 Position Pac-Man at middle of the lane, centered for movement changes
                    transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                    // T18 get mspacmans rigidbody make her velocity go up, x is vertMove,x is 0
                    //rb.velocity = new Vector2(0, vertMove) * speed;
                    // T19
                    rb.velocity = moveVect * speed;

                    // make mspacman face right, using her sprite, she faces left by default
                    transform.localScale = new Vector2(1, 1);
                    // set rotation to its default
                    transform.localRotation = Quaternion.Euler(0, 0, 270);
                }
            }

            /* T19 Moved in T19 into if and else statements above this section
             * 
            // T18 get mspacmans rigidbody make her velocity go right, x is horzMove, y is 0
            //rb.velocity = new Vector2(0, vertMove) * speed;
            // T19
            rb.velocity = moveVect * speed;

            // make mspacman face right, using her sprite, she faces left by default
            transform.localScale = new Vector2(1, 1);
            // set rotation to its default
            transform.localRotation = Quaternion.Euler(0, 0, 270);
            */

        }

        else if (Input.GetKeyDown("s"))
        {
            // T19 enable mspacman to reverse direction anywhere, without being on turn points
            // if mspacman is moving in the left direction
            if (localVelocity.y < 0)
            {
                // T19 define moveVect, for moving vertically, x is 0
                moveVect = new Vector2(0, vertMove);

                // T19 Position Pac-Man at middle of the lane, centered for movement changes
                transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                // T18 get mspacmans rigidbody make her velocity go right, x is horzMove, y is 0
                //rb.velocity = new Vector2(0, vertMove) * speed;
                // T19
                rb.velocity = moveVect * speed;

                // make mspacman face right, using her sprite, she faces left by default
                transform.localScale = new Vector2(1, 1);

                // set rotation to its default
                transform.localRotation = Quaternion.Euler(0, 0, 90);
            }
            else
            {


                // T19 define moveVect, for moving vertically, x is 0
                moveVect = new Vector2(0, vertMove);

                // if we can move in a requested direction
                if (CanIMoveInDirection(moveVect))
                {
                    // T19 Position Pac-Man at middle of the lane, centered for movement changes
                    transform.position = new Vector2((int)transform.position.x + .5f, (int)transform.position.y + .5f);

                    // T18 get mspacmans rigidbody make her velocity go right, x is horzMove, y is 0
                    //rb.velocity = new Vector2(0, vertMove) * speed;
                    // T19
                    rb.velocity = moveVect * speed;

                    // make mspacman face right, using her sprite, she faces left by default
                    transform.localScale = new Vector2(1, 1);

                    // set rotation to its default
                    transform.localRotation = Quaternion.Euler(0, 0, 90);
                }
            }

            /* T19 Moved in T19 into if and else statements above this section
             * 
            // T18 get mspacmans rigidbody make her velocity go right, x is horzMove, y is 0
            //rb.velocity = new Vector2(0, vertMove) * speed;
            // T19
            rb.velocity = moveVect * speed;


            // make mspacman face right, using her sprite, she faces left by default
            transform.localScale = new Vector2(1, 1);

            // set rotation to its default
            transform.localRotation = Quaternion.Euler(0, 0, 90);
            */

        }
        // T19 call our paused mspacman image, to see if we hit a wall, and are going to stop
        UpdateEatingAnimation();
    }


    // T19 Find out if Pac-man is on a TurningPoint, 
    // to verify if mspacman  can move in the direction (dir), inputed by the user, using keypad
    bool CanIMoveInDirection(Vector2 dir)
    {
        // get mspacmans current position
        Vector2 pos = transform.position;

        // Used to find if there a Point in the array or null
        // is there a point in the array that matches up with mspacmans current position
        // find the GBGrid game object, to get hold of the gBPoints array, through the GameBoard script component,
        // the gBPoints array, inside of the Gameboard script holds the dimmnsions of the x,y gameplay turningpoint area: [27, 30];
        Transform point = GameObject.Find("GBGrid").GetComponent<Gameboard>().gBPoints[(int)pos.x, (int)pos.y];

        // did we find a turningpoint in the array, we just looked for one in, 
        // not a null, everywhere else will  have a turning Point
        if (point != null)
        {
            // get Points associated with that specific game object, point
            GameObject PointGO = point.gameObject;

            // Get vector To Next Point array attached to the point, and store in an array
            // by getting specifically, the TurningPoint, and assigning it to itself
            Vector2[] vectToNextPoint = PointGO.GetComponent<TurningPoint>().vectToNextPoint;

            // Cycle through the attached vectToNextPoint array,
            // to see if we have a match with the direction the user wants to go in
            foreach (Vector2 vect in vectToNextPoint)
            {
                if (vect == dir)
                {
                    // if we get a match
                    return true;
                }
            }
        }
        return false;
    }


    // T19 Check if Pac-Man hit a wall
    // Change all Dots to Dot Tag and Pills to Pill Tag
    // Add 'Is Trigger' to Points with Circle Collider Radius .1
    // Add Tag Point to all Points
    private void OnTriggerEnter2D(Collider2D col)
    {
        bool hitAWall = false;

        // T19 if mspacman hits the component that has a tag of 'Point' associated with it,
        // not dots or Pills, we will get the vector of the next turning point, to verify if we can continue 
        // moving, in the direction we are moving in, or if we hit a wall; if the turningpoint doesn't exist means its a wall there
        if (col.gameObject.tag == "Point")
        {
            Vector2[] vectToNextPoint = col.GetComponent<TurningPoint>().vectToNextPoint;

            // Cycle through the attached vectToNextPoint array
            // to see if there is a Vector2 == Pac-Mans velocity 
            // or the direction Pac-Man wants to travel in 
            // see if the vectToNextPoint exists, and look in its elements to see if,
            // mspacmans rigidbody s speed or direction is in that array, and normalize since we only need the direction
            if (Array.Exists(vectToNextPoint, element => element == rb.velocity.normalized))
            {
                // yes there is a posibble direction to go in
                hitAWall = false;
            }
            else
            {
                // yes we hit a wall; can't go in that direction
                hitAWall = true;               
            }

            // verify the mspacman is centered in the maze borders
            // on a turning point then stop, by getting the Point that mspacman col with
            // Needed to make Pac-Man stop on the Point when it 
            // hits a wall
            transform.position = new Vector2((int)col.transform.position.x + .5f,
                (int)col.transform.position.y + .5f);

            // If we hit a wall stop mspacman from moving
            if (hitAWall)
            {
                rb.velocity = Vector2.zero;
            }              
        }
    }

    // T19 When Pac-Man hits a wall the animation will stop, and so will the animation itself
    // we will cal this function in fixed update
    void UpdateEatingAnimation()
    {
        // if the rigidbody2d (mspacman) velocity is stopped(zero)
        if(rb.velocity == Vector2.zero)
        {
            // get the animator and set it to false,
            // then get the sprite renderer and render our stopped sprite
            GetComponent<Animator>().enabled = false;
            GetComponent<SpriteRenderer>().sprite = pausedSprite;
        }
        else
        {
            // otherwise keep the animation moving
            GetComponent<Animator>().enabled = true;
        }
    }
}
 
 